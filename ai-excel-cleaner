import streamlit as st
import pandas as pd
import openai
import io
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import json
from sklearn.preprocessing import StandardScaler, MinMaxScaler
import time
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import hashlib
import sqlite3
from fpdf import FPDF
import smtplib
from email.message import EmailMessage
import xlsxwriter

# Set up Streamlit UI
st.set_page_config(page_title="AI-Powered Excel Data Cleaner", layout="wide")
st.title("🚀 AI-Powered Excel Data Cleaner & Analyzer")
st.write("Upload your messy Excel file, and let AI clean, analyze, and visualize it!")

# User Authentication
conn = sqlite3.connect("users.db")
c = conn.cursor()
c.execute("CREATE TABLE IF NOT EXISTS users (username TEXT, password TEXT)")

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def login():
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    if st.button("Login"):
        c.execute("SELECT * FROM users WHERE username=? AND password=?", (username, hash_password(password)))
        if c.fetchone():
            st.success("Login successful!")
            return True
        else:
            st.error("Invalid credentials!")
            return False
    return False

def register():
    new_username = st.text_input("New Username")
    new_password = st.text_input("New Password", type="password")
    if st.button("Register"):
        c.execute("INSERT INTO users VALUES (?, ?)", (new_username, hash_password(new_password)))
        conn.commit()
        st.success("Registration successful! You can now log in.")

st.sidebar.subheader("🔐 User Authentication")
if "authenticated" not in st.session_state:
    st.session_state["authenticated"] = False
option = st.sidebar.radio("Login or Register", ["Login", "Register"])
if option == "Login":
    st.session_state["authenticated"] = login()
elif option == "Register":
    register()

if st.session_state["authenticated"]:
    # File uploader
    uploaded_file = st.file_uploader("Upload an Excel or CSV file", type=["xlsx", "csv"])

    if uploaded_file:
        # Read file based on format
        if uploaded_file.name.endswith(".csv"):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        st.write("📂 Original Data:", df)
        
        # Data Cleaning
        df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")
        df.drop_duplicates(inplace=True)
        
        # AI-Powered Missing Value Filling
        openai.api_key = "your_openai_api_key_here"
        for col in df.columns:
            if df[col].isnull().sum() > 0:
                prompt = f"Fill missing values for column {col}. Example values: {df[col].dropna().tolist()[:5]}"
                response = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": "You are an AI assistant for data cleaning."},
                        {"role": "user", "content": prompt}
                    ]
                )
                fill_value = response["choices"][0]["message"]["content"]
                df[col].fillna(fill_value, inplace=True)
        
        st.write("✅ Cleaned Data:", df)
        
        # Google Sheets Integration
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
        client = gspread.authorize(creds)
        sheet = client.open("Cleaned Data").sheet1
        sheet.clear()
        sheet.append_rows(df.values.tolist())
        st.success("✅ Data Synced with Google Sheets!")
        
        # Data Insights Panel
        st.subheader("📊 Data Insights")
        st.write("Total Rows:", df.shape[0])
        st.write("Total Columns:", df.shape[1])
        st.write("Missing Values:", df.isnull().sum().sum())
        
        # Export Options
        st.download_button("Download as CSV", df.to_csv().encode('utf-8'), "cleaned_data.csv", "text/csv")
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, sheet_name='Cleaned Data', index=False)
        st.download_button("Download as Excel", output.getvalue(), "cleaned_data.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        
        # Email Notification
        def send_email(to_email, subject, message):
            email_sender = "your_email@example.com"
            email_password = "your_email_password"
            msg = EmailMessage()
            msg.set_content(message)
            msg["Subject"] = subject
            msg["From"] = email_sender
            msg["To"] = to_email
            with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
                server.login(email_sender, email_password)
                server.send_message(msg)
        
        user_email = st.text_input("Enter your email to receive cleaned data:")
        if st.button("Send Email"):
            send_email(user_email, "Your Cleaned Data", "Please find the cleaned data attached.")
            st.success("📧 Email sent successfully!")
        
        st.success("✅ New Enhancements Added!")
